diff --git a/packages/bsky/src/data-plane/server/index.ts b/packages/bsky/src/data-plane/server/index.ts
index f925de83c..8040e9a65 100644
--- a/packages/bsky/src/data-plane/server/index.ts
+++ b/packages/bsky/src/data-plane/server/index.ts
@@ -7,6 +7,7 @@ import { Database } from './db'
 import { IdResolver, MemoryCache } from '@atproto/identity'
 
 export { RepoSubscription } from './subscription'
+export { BackgroundQueue } from './background'
 
 export class DataPlaneServer {
   constructor(public server: http.Server, public idResolver: IdResolver) {}
diff --git a/services/bsky/api.js b/services/bsky/api.js
index 44d8f96b3..4e03a6869 100644
--- a/services/bsky/api.js
+++ b/services/bsky/api.js
@@ -41,18 +41,61 @@ const path = require('node:path')
 const assert = require('node:assert')
 const cluster = require('cluster')
 const { Secp256k1Keypair } = require('@atproto/crypto')
-const { ServerConfig, BskyAppView } = require('@atproto/bsky')
+const bsky = require('@atproto/bsky') // import all bsky features
 
 const main = async () => {
   const env = getEnv()
-  const config = ServerConfig.readEnv()
+  const config = bsky.ServerConfig.readEnv()
   assert(env.serviceSigningKey, 'must set BSKY_SERVICE_SIGNING_KEY')
   const signingKey = await Secp256k1Keypair.import(env.serviceSigningKey)
-  const bsky = BskyAppView.create({ config, signingKey })
-  await bsky.start()
+
+// starts: involve logics in packages/dev-env/src/bsky.ts >>>>>>>>>>>>>
+// Separate migration db in case migration changes some connection state that we need in the tests, e.g. "alter database ... set ..."
+  const migrationDb = new bsky.Database({
+      url: env.dbPostgresUrl,
+      schema: env.dbPostgresSchema,
+    })
+  if (env.migration) {
+      await migrationDb.migrateToOrThrow(env.migration)
+  } else {
+      await migrationDb.migrateToLatestOrThrow()
+  }
+  await migrationDb.close()
+
+  const db = new bsky.Database({
+      url: env.dbPostgresUrl,
+      schema: env.dbPostgresSchema,
+      poolSize: 10,
+  })
+
+  const dataplane =  await bsky.DataPlaneServer.create(
+      db,
+      env.dataplanePort,
+      config.didPlcUrl
+  )
+
+  const bsync = await bsky.MockBsync.create(db, env.bsyncPort)
+
+// ends: involve logics in packages/dev-env/src/bsky.ts   <<<<<<<<<<<<<
+
+  const server = bsky.BskyAppView.create({ config, signingKey })
+// starts: involve logics in packages/dev-env/src/bsky.ts >>>>>>>>>>>>>
+  const sub = new bsky.RepoSubscription({
+      service: env.repoProvider,
+      db,
+      idResolver: dataplane.idResolver,
+      background: new bsky.BackgroundQueue(db),
+    })
+// ends: involve logics in packages/dev-env/src/bsky.ts   <<<<<<<<<<<<<
+  await server.start()
+  sub.run() // involve logics in packages/dev-env/src/bsky.ts
   // Graceful shutdown (see also https://aws.amazon.com/blogs/containers/graceful-shutdowns-with-ecs/)
   const shutdown = async () => {
-    await bsky.destroy()
+      await server.destroy()
+      await bsync.destroy()
+      await dataplane.destroy()
+      await sub.destroy()
+      await db.close()
   }
   process.on('SIGTERM', shutdown)
   process.on('disconnect', shutdown) // when clustering
@@ -60,6 +103,12 @@ const main = async () => {
 
 const getEnv = () => ({
   serviceSigningKey: process.env.BSKY_SERVICE_SIGNING_KEY || undefined,
+  dbPostgresUrl:     process.env.BSKY_DB_POSTGRES_URL     || undefined,
+  dbPostgresSchema:  process.env.BSKY_DB_POSTGRES_SCHEMA  || undefined,
+  dataplanePort :    maybeParseInt(process.env.BSKY_DATAPLANE_PORT)     || undefined,
+  bsyncPort :        maybeParseInt(process.env.BSKY_BSYNC_PORT)         || undefined,
+  migration:         process.env.ENABLE_MIGRATIONS === 'true'           || undefined,
+  repoProvider:      process.env.BSKY_REPO_PROVIDER                     || undefined
 })
 
 const maybeParseInt = (str) => {
diff --git a/services/ozone/api.js b/services/ozone/api.js
index a58e8e53c..e061c9a6c 100644
--- a/services/ozone/api.js
+++ b/services/ozone/api.js
@@ -23,12 +23,26 @@ const {
   envToSecrets,
   readEnv,
   httpLogger,
+  Database
 } = require('@atproto/ozone')
 
 const main = async () => {
   const env = readEnv()
   const cfg = envToCfg(env)
   const secrets = envToSecrets(env)
+  // starts: emulate packages/dev-env/src/ozone.ts  otherwise get errors saying no relation >>>>>>>>>
+  // Separate migration db in case migration changes some connection state that we need in the tests, e.g. "alter database ... set ..."
+    const migrationDb = new Database({
+      schema: env.dbPostgresSchema,
+      url: env.dbPostgresUrl,
+    })
+    if (env.migration) {
+      await migrationDb.migrateToOrThrow(env.migration)
+    } else {
+      await migrationDb.migrateToLatestOrThrow()
+    }
+    await migrationDb.close()
+  // ends: emulate packages/dev-env/src/ozone.ts  otherwise get errors saying no relation <<<<<<<<<
 
   // configure zero, one, or more image invalidators
   const imgUriEndpoint = process.env.OZONE_IMG_URI_ENDPOINT
