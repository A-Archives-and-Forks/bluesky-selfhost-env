diff --git a/lib/envprovider.ts b/lib/envprovider.ts
new file mode 100644
index 0000000..895bc66
--- /dev/null
+++ b/lib/envprovider.ts
@@ -0,0 +1,70 @@
+import  * as consts from '@/lib/constants'
+
+const REST_PATH_ENV = '/.env'
+
+class EnvProvider{
+    private static instance: EnvProvider = new EnvProvider()
+    private cache: {[key: string]: string} | undefined  = undefined // env holder
+
+    private constructor() {}
+    static getInstance(): EnvProvider { return EnvProvider.instance }
+
+    getEnv( key: string|null = null) {
+          if (this.cache != undefined ){
+              const envs = this.cache
+	      return (key == null) ? envs : envs[key]   // return with d
+          }
+          throw new Error("EnvProvider::getEnv(): no cache exists yet!")
+    }
+
+    async fetchEnv(
+      key: string|null = null,
+      incConst: boolean = true,
+      incBuildEnv: boolean = false,
+      restpath: string = REST_PATH_ENV,
+      save2cache: boolean = true
+    ) {
+        try {
+             return this.getEnv(key)
+        } catch (err){ /* ignore */ }
+
+        const url  = new URL(restpath, window?.location?.origin ?? '')
+        const d    = await EnvProvider._fetch(url)
+        const envs = Object.assign({},	(incConst==true)? consts: {},  (incBuildEnv==true)? process.env: {}, d ?? {} )
+        console.log("############ EnvProvider::fetchEnv => fetch ? ", (d ==undefined) ? 'failed':'success', envs )
+        if (save2cache == true) {
+          this.cache = envs
+        }
+	return (key == null) ? envs : envs[key]   // return with d
+    }
+
+    private static async _fetch(url: URL|string) {
+        try {
+            const res = await fetch(url)
+            return  await res.json()
+        } catch(err) {
+            return undefined
+        }
+    }
+}
+
+export const fetchEnv = async function(
+  key: string|null = null,
+  incConst: boolean = true,
+  incBuildEnv: boolean = false,
+  restpath: string = REST_PATH_ENV
+) {
+  return await EnvProvider.getInstance().fetchEnv(key, incConst, incBuildEnv, restpath)
+}
+
+//export const getEnv =  function( key: string|null = null) { return EnvProvider.getInstance().getEnv(key) }
+
+export const fetchEnvSync = function(
+  key: string|null = null,
+  incConst: boolean = true,
+  incBuildEnv: boolean = false,
+  restpath: string = REST_PATH_ENV
+) {
+  const pull = async () =>   { const rtn = await fetchEnv(key, incConst, incBuildEnv, restpath); return rtn};
+  return pull() // it returns Promise instance but not real value.
+}
