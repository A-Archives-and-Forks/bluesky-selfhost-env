diff --git a/packages/dev-env/src/bsky.ts b/packages/dev-env/src/bsky.ts
index 81d2caf67..01545f05c 100644
--- a/packages/dev-env/src/bsky.ts
+++ b/packages/dev-env/src/bsky.ts
@@ -7,6 +7,7 @@ import { Client as PlcClient } from '@did-plc/lib'
 import { BskyConfig } from './types'
 import { ADMIN_PASSWORD } from './const'
 import { BackgroundQueue } from '@atproto/bsky/src/data-plane/server/background'
+import { Debugdump } from './debug'
 
 export class TestBsky {
   constructor(
@@ -17,9 +18,13 @@ export class TestBsky {
     public dataplane: bsky.DataPlaneServer,
     public bsync: bsky.MockBsync,
     public sub: bsky.RepoSubscription,
-  ) {}
+  ) {
+    Debugdump.dump("### bsky.ts @ TestBsk.constructor({url,port,db, server:BskyAppView, dataplane:DataPlaneServer, bsync:MocBsync, sub:RepoSubscription}) called ### ")
+  }
 
   static async create(cfg: BskyConfig): Promise<TestBsky> {
+    Debugdump.dump("### bsky.ts @ TestBsk.create(cfg) called with ### ", cfg)
+
     const serviceKeypair = await Secp256k1Keypair.create()
     const plcClient = new PlcClient(cfg.plcUrl)
 
@@ -33,12 +38,28 @@ export class TestBsky {
       signer: serviceKeypair,
     })
 
+    Debugdump.dump("### bsky.ts @ serverDid: "+ serverDid +"  <= create() ### ")
+
+    Debugdump.dump("### bsky.ts @ serverDid:"+ serverDid +" created for 'bsky.test' with ### ", {
+      signingKey: serviceKeypair.did(),
+      rotationKeys: [serviceKeypair.did()],
+      handle: 'bsky.test',
+      pds: `http://localhost:${port}`,
+      signer: 'serviceKeypair in bin',
+    })
+
+
     // shared across server, ingester, and indexer in order to share pool, avoid too many pg connections.
     const db = new bsky.Database({
       url: cfg.dbPostgresUrl,
       schema: cfg.dbPostgresSchema,
       poolSize: 10,
     })
+    Debugdump.dump("### bsky.ts @ bsky.Database({url,schema, poolSize}) with ### ", {
+      url: cfg.dbPostgresUrl,
+      schema: cfg.dbPostgresSchema,
+      poolSize: 10,
+    })
 
     const dataplanePort = await getPort()
     const dataplane = await bsky.DataPlaneServer.create(
@@ -46,9 +67,13 @@ export class TestBsky {
       dataplanePort,
       cfg.plcUrl,
     )
+    Debugdump.dump("### bsky.ts @ bsky.DataPlaneServer.create({db, dataPlanePort, plcUrl}) with ### ", { plcUrl: cfg.plcUrl} )
+
 
     const bsyncPort = await getPort()
     const bsync = await bsky.MockBsync.create(db, bsyncPort)
+    Debugdump.dump("### bsky.ts @ bsky.MockBsync.create({db, bsyncPort}) with ### ", { bsyncPort: bsyncPort } )
+
 
     const config = new bsky.ServerConfig({
       version: 'unknown',
@@ -66,6 +91,7 @@ export class TestBsky {
       ...cfg,
       adminPasswords: [ADMIN_PASSWORD],
     })
+    Debugdump.dump("### bsky.ts @ config <= bsky.ServerConfig(a lots) ##################### ", config)
 
     // Separate migration db in case migration changes some connection state that we need in the tests, e.g. "alter database ... set ..."
     const migrationDb = new bsky.Database({
@@ -84,6 +110,8 @@ export class TestBsky {
       config,
       signingKey: serviceKeypair,
     })
+    Debugdump.dump("### bsky.ts @ server <= bsky.BskyAppView.create({config, signingKey}) ### ")
+
 
     const sub = new bsky.RepoSubscription({
       service: cfg.repoProvider,
@@ -92,8 +120,18 @@ export class TestBsky {
       background: new BackgroundQueue(db),
     })
 
+    Debugdump.dump("### bsky.ts @ sub <= bsky.RepoSubscription({service, db, idResolver, background}) with obj of ### ",
+    {
+      service: cfg.repoProvider,
+      db: 'db',
+      idResolver: 'dataplane.idResolver',
+      background: 'new BackgroundQueue(db)',
+    })
+
     await server.start()
     sub.run()
+    Debugdump.dump("### bsky.ts @ server and sub(RepoSubscription) starts ### ")
+
 
     return new TestBsky(url, port, db, server, dataplane, bsync, sub)
   }
diff --git a/packages/dev-env/src/network.ts b/packages/dev-env/src/network.ts
index fc1ed67c1..34b0c95e3 100644
--- a/packages/dev-env/src/network.ts
+++ b/packages/dev-env/src/network.ts
@@ -11,6 +11,7 @@ import { TestOzone, createOzoneDid } from './ozone'
 import { mockNetworkUtilities } from './util'
 import { TestNetworkNoAppView } from './network-no-appview'
 import { Secp256k1Keypair } from '@atproto/crypto'
+import { Debugdump } from './debug'
 
 const ADMIN_USERNAME = 'admin'
 const ADMIN_PASSWORD = 'admin-pass'
@@ -28,6 +29,8 @@ export class TestNetwork extends TestNetworkNoAppView {
   static async create(
     params: Partial<TestServerParams> = {},
   ): Promise<TestNetwork> {
+    Debugdump.dump("### network.ts @ TestNetwork.create(params) called with ### ", params)
+
     const redisHost = process.env.REDIS_HOST
     const dbPostgresUrl = params.dbPostgresUrl || process.env.DB_POSTGRES_URL
     assert(dbPostgresUrl, 'Missing postgres url for tests')
@@ -44,6 +47,12 @@ export class TestNetwork extends TestNetworkNoAppView {
     const ozoneKey = await Secp256k1Keypair.create({ exportable: true })
     const ozoneDid = await createOzoneDid(plc.url, ozoneKey)
 
+    Debugdump.dump("### network.ts @ ozoneDid <- createOzoneDid(plcUrl, ozoneKey) ### ",
+    {'ozoneDid': ozoneDid,
+     'ozoneKey(hex)': uint8arrays.toString(await ozoneKey.export(), 'hex')
+    })
+
+
     const bsky = await TestBsky.create({
       port: bskyPort,
       plcUrl: plc.url,
@@ -55,6 +64,8 @@ export class TestNetwork extends TestNetworkNoAppView {
       modServiceDid: ozoneDid,
       ...params.bsky,
     })
+    Debugdump.dump("### network.ts @ bsky created ### ")
+
 
     const pds = await TestPds.create({
       port: pdsPort,
@@ -66,6 +77,8 @@ export class TestNetwork extends TestNetworkNoAppView {
       ...params.pds,
     })
 
+    Debugdump.dump("### network.ts @ pds created ### ")
+
     const ozone = await TestOzone.create({
       port: ozonePort,
       plcUrl: plc.url,
@@ -81,6 +94,8 @@ export class TestNetwork extends TestNetworkNoAppView {
       ...params.ozone,
     })
 
+    Debugdump.dump("### network.ts @ ozone created ### ")
+
     mockNetworkUtilities(pds, bsky)
 
     return new TestNetwork(plc, pds, bsky, ozone)
diff --git a/packages/dev-env/src/ozone.ts b/packages/dev-env/src/ozone.ts
index 90733932e..36d13079c 100644
--- a/packages/dev-env/src/ozone.ts
+++ b/packages/dev-env/src/ozone.ts
@@ -9,6 +9,7 @@ import { DidAndKey, OzoneConfig } from './types'
 import { ADMIN_PASSWORD } from './const'
 import { createDidAndKey } from './util'
 import { ModeratorClient } from './moderator-client'
+import { Debugdump } from './debug'
 
 export class TestOzone {
   constructor(
@@ -22,26 +23,34 @@ export class TestOzone {
   ) {}
 
   static async create(config: OzoneConfig): Promise<TestOzone> {
+    Debugdump.dump("### ozone.ts @ TestOzone.create(config) called with ################# ", config)
+
     const serviceKeypair =
       config.signingKey ?? (await Secp256k1Keypair.create({ exportable: true }))
     const signingKeyHex = ui8.toString(await serviceKeypair.export(), 'hex')
+    Debugdump.dump("### ozone.ts @  [ serviceKeypair, signingKeyHex ] <= [ create(), export() ]  ### ")
+
     let serverDid = config.serverDid
     if (!serverDid) {
       serverDid = await createOzoneDid(config.plcUrl, serviceKeypair)
+      Debugdump.dump("### ozone.ts @ got serverDid <= createOzoneDid(plcurl, serviceKeypair)  ### ", serverDid)
     }
 
+    Debugdump.dump("### ozone.ts @ get admin <= createDidAndKey(plcUrl, handle, pds)  ### ")
     const admin = await createDidAndKey({
       plcUrl: config.plcUrl,
       handle: 'admin.ozone',
       pds: 'https://pds.invalid',
     })
 
+    Debugdump.dump("### ozone.ts @ get moderator <= createDidAndKey(plcUrl, handle, pds)  ### ")
     const moderator = await createDidAndKey({
       plcUrl: config.plcUrl,
       handle: 'moderator.ozone',
       pds: 'https://pds.invalid',
     })
 
+    Debugdump.dump("### ozone.ts @ get triage <= createDidAndKey(plcUrl, handle, pds)  ### ")
     const triage = await createDidAndKey({
       plcUrl: config.plcUrl,
       handle: 'triage.ozone',
@@ -69,6 +78,8 @@ export class TestOzone {
       ],
       triageDids: [...(config.triageDids ?? []), triage.did],
     }
+    Debugdump.dump("### ozone.ts @ env <= ozone.OzoneEnvironment(given, +additional), result(env): ### ", env)
+
 
     // Separate migration db in case migration changes some connection state that we need in the tests, e.g. "alter database ... set ..."
     const migrationDb = new ozone.Database({
@@ -83,6 +94,8 @@ export class TestOzone {
     await migrationDb.close()
 
     const cfg = ozone.envToCfg(env)
+    Debugdump.dump("### ozone.ts @ cfg <= ozone.envToCfg(env), result(cfg): ###################################### ", env)
+
     const secrets = ozone.envToSecrets(env)
 
     // api server
@@ -90,9 +103,17 @@ export class TestOzone {
       imgInvalidator: config.imgInvalidator,
     })
     await server.start()
+    Debugdump.dump("### ozone.ts @ server <= ozone.OzoneService.create(cfg, secrets, config.imgInvalidator) with : ### ", {
+      imgInvalidator: config.imgInvalidator,
+    })
 
     const daemon = await ozone.OzoneDaemon.create(cfg, secrets)
     await daemon.start()
+
+    Debugdump.dump("### ozone.ts @ daemon <= ozone.OzoneService.create(cfg, secrets) and starts ### ")
+
+    Debugdump.dump("### ozone.ts @ disable;  daemon.ctx.eventReverser.destory() ### ")
+
     // don't do event reversal in dev-env
     await daemon.ctx.eventReverser.destroy()
 
@@ -172,6 +193,24 @@ export const createOzoneDid = async (
     },
     keypair,
   )
+  Debugdump.dump("### ozone.ts @ createOzoneDid() => plc.didForCreateOp(below, keypair) ### ",
+  {
+      type: 'plc_operation',
+      alsoKnownAs: [],
+      rotationKeys: [keypair.did()],
+      verificationMethods: {
+        atproto_label: keypair.did(),
+      },
+      services: {
+        atproto_labeler: {
+          type: 'AtprotoLabeler',
+          endpoint: 'https://ozone.public.url',
+        },
+      },
+      prev: null,
+  })
+
+
   const did = await plc.didForCreateOp(plcOp)
   await plcClient.sendOperation(did, plcOp)
   return did
diff --git a/packages/dev-env/src/pds.ts b/packages/dev-env/src/pds.ts
index d1b3cbbc3..85e058526 100644
--- a/packages/dev-env/src/pds.ts
+++ b/packages/dev-env/src/pds.ts
@@ -9,6 +9,8 @@ import { Secp256k1Keypair, randomStr } from '@atproto/crypto'
 import { AtpAgent } from '@atproto/api'
 import { PdsConfig } from './types'
 import { ADMIN_PASSWORD, JWT_SECRET } from './const'
+import { Debugdump } from './debug'
+
 
 export class TestPds {
   constructor(
@@ -18,10 +20,14 @@ export class TestPds {
   ) {}
 
   static async create(config: PdsConfig): Promise<TestPds> {
+    Debugdump.dump("### pds.ts @ TestPds.create(config) called with ################# ", config)
+
     const plcRotationKey = await Secp256k1Keypair.create({ exportable: true })
     const plcRotationPriv = ui8.toString(await plcRotationKey.export(), 'hex')
     const recoveryKey = (await Secp256k1Keypair.create()).did()
 
+    Debugdump.dump("### pds.ts @ genKeys [ plcRotaionKey, plcRotaionKeyPriv, recoveryKey ]  ### ")
+
     const port = config.port || (await getPort())
     const url = `http://localhost:${port}`
 
@@ -47,10 +53,16 @@ export class TestPds {
       inviteRequired: false,
       ...config,
     }
+    Debugdump.dump("### pds.ts @ env <= pds.ServerEnvironment(given, +additional), result(env): ### ", env)
+
     const cfg = pds.envToCfg(env)
+    Debugdump.dump("### pds.ts @ cfg <= pds.envToCfg(env), result(cfg): ############################ ", cfg )
+
     const secrets = pds.envToSecrets(env)
 
     const server = await pds.PDS.create(cfg, secrets)
+    Debugdump.dump("### pds.ts @ server <= pds.PDS.create(cfg, secrets) and starts it ### ")
+
 
     await server.start()
 
diff --git a/packages/dev-env/src/util.ts b/packages/dev-env/src/util.ts
index 3c7276ef3..1b0eec481 100644
--- a/packages/dev-env/src/util.ts
+++ b/packages/dev-env/src/util.ts
@@ -5,6 +5,9 @@ import { Secp256k1Keypair } from '@atproto/crypto'
 import { TestPds } from './pds'
 import { TestBsky } from './bsky'
 import { DidAndKey } from './types'
+import { Debugdump } from './debug'
+import * as ui8 from 'uint8arrays'
+
 
 export const mockNetworkUtilities = (pds: TestPds, bsky?: TestBsky) => {
   mockResolvers(pds.ctx.idResolver, pds)
@@ -77,7 +80,13 @@ export const createDidAndKey = async (opts: {
   pds: string
 }): Promise<DidAndKey> => {
   const { plcUrl, handle, pds } = opts
+  Debugdump.dump("### util.ts @ createDidAndKey called ###",{'handle': handle, 'pds': pds})
   const key = await Secp256k1Keypair.create({ exportable: true })
+
+  const _debugKeyHex = ui8.toString(await key.export(), 'hex')
+  Debugdump.dump("### util.ts @ got key for "+ handle +"    ###",{ 'key': _debugKeyHex, 'key.did()': key.did()})
+
+
   const did = await new plc.Client(plcUrl).createDid({
     signingKey: key.did(),
     rotationKeys: [key.did()],
@@ -85,6 +94,16 @@ export const createDidAndKey = async (opts: {
     pds,
     signer: key,
   })
+
+  Debugdump.dump("### util.ts @ call plc.createDid( "+ handle +" , "+ pds +" ,plcUrl)  ###",
+  {
+    signingKey: key.did(),
+    rotationKeys: [key.did()],
+    handle,
+    pds,
+    signer: _debugKeyHex + " in binnary",
+  })
+
   return {
     key,
     did,
