diff --git a/components/repositories/DidHistory.tsx b/components/repositories/DidHistory.tsx
index 12332ac..28b54a5 100644
--- a/components/repositories/DidHistory.tsx
+++ b/components/repositories/DidHistory.tsx
@@ -1,5 +1,6 @@
 import { Loading } from '@/common/Loader'
 import { PLC_DIRECTORY_URL } from '@/lib/constants'
+import { fetchEnv } from '@/lib/envprovider'
 import { ArrowTopRightOnSquareIcon } from '@heroicons/react/20/solid'
 import { useQuery } from '@tanstack/react-query'
 
@@ -31,8 +32,8 @@ export const useDidHistory = (did: string) =>
     cacheTime: 1000 * 60 * 5,
     queryFn: async () => {
       if (!did.startsWith('did:plc')) return null
-
-      const url = `${PLC_DIRECTORY_URL}/${did}/log/audit`
+      const envs = await fetchEnv()
+      const url = new URL(`${did}/log/audit`, envs?.OZONE_DID_PLC_URL || envs?.PLC_DIRECTORY_URL || envs?.NEXT_PUBLIC_PLC_DIRECTORY_URL || 'https://plc.directory')
       const res = await fetch(url)
       return res.json()
     },
diff --git a/components/shell/LoginModal.tsx b/components/shell/LoginModal.tsx
index d76716e..4d4227c 100644
--- a/components/shell/LoginModal.tsx
+++ b/components/shell/LoginModal.tsx
@@ -7,6 +7,7 @@ import { AuthState } from '@/lib/types'
 import Client from '@/lib/client'
 import { ConfigurationFlow } from './ConfigurationFlow'
 import { ErrorInfo } from '@/common/ErrorInfo'
+import { fetchEnv } from '@/lib/envprovider'
 
 export function LoginModal() {
   const { isValidatingAuth, isLoggedIn, authState } = useContext(AuthContext)
@@ -42,6 +43,11 @@ export function LoginModal() {
     }
   }, [isLoggedIn])
 
+  useEffect(() => {
+    const pullEnv = async() => { await fetchEnv() }
+    pullEnv()
+  },[])
+
   const onSubmit = async (e: FormEvent<HTMLFormElement>) => {
     e.preventDefault()
     e.stopPropagation()
diff --git a/lib/client.ts b/lib/client.ts
index aa799bc..89a17e8 100644
--- a/lib/client.ts
+++ b/lib/client.ts
@@ -2,6 +2,7 @@ import { AtpAgent, AtpServiceClient, AtpSessionData } from '@atproto/api'
 import { AuthState } from './types'
 import { OzoneConfig, getConfig } from './client-config'
 import { OZONE_SERVICE_DID } from './constants'
+import { fetchEnv } from '@/lib/envprovider'
 
 export interface ClientSession extends AtpSessionData {
   service: string
@@ -16,6 +17,7 @@ class ClientManager extends EventTarget {
   hasSetup = false
   private _agent: AtpAgent | undefined
   private _session: ClientSession | undefined
+  private _envs: {[key: string]: string} | undefined
 
   get authState() {
     if (!this._agent || !this._session) {
@@ -51,6 +53,7 @@ class ClientManager extends EventTarget {
     if (this.hasSetup) return this.authState
     this._session = _loadSession()
     await this._setup()
+    this._envs = await fetchEnv()// get whole envs from server side
     this.hasSetup = true
     this._emit('change')
     return this.authState
@@ -137,7 +140,7 @@ class ClientManager extends EventTarget {
   }
 
   private async _getConfig(ozoneDid?: string) {
-    const builtIn = ozoneDid || OZONE_SERVICE_DID
+    const builtIn = ozoneDid || this._envs?.OZONE_SERVER_DID || this._envs?.OZONE_SERVICE_DID || this._envs?.NEXT_PUBLIC_OZONE_SERVICE_DID || undefined
     return await getConfig(builtIn)
   }
 
diff --git a/lib/identity.ts b/lib/identity.ts
index 3fa4f5f..7cdb8dd 100644
--- a/lib/identity.ts
+++ b/lib/identity.ts
@@ -1,5 +1,6 @@
 import clientManager from './client'
 import { PLC_DIRECTORY_URL } from './constants'
+import { fetchEnv } from './envprovider'
 
 export const getDidFromHandle = async (
   handle: string,
@@ -20,7 +21,8 @@ export const resolveDidDocData = async function (
   did: string,
 ): Promise<DidDocData | null> {
   if (did.startsWith('did:plc:')) {
-    const url = new URL(`/${did}/data`, PLC_DIRECTORY_URL)
+    const envs = await fetchEnv()
+    const url = new URL(`/${did}/data`, envs?.OZONE_DID_PLC_URL || envs?.PLC_DIRECTORY_URL || envs?.NEXT_PUBLIC_PLC_DIRECTORY_URL || 'https://plc.directory')
     const res = await fetch(url)
     if (res.status !== 200) return null
     const doc = await res.json()
