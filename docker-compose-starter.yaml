#
#
# PASS = openssl ecparam --name secp256k1 --genkey --noout --outform DER | tail --bytes=+8 | head --bytes=32 | xxd --plain --cols 32

version: "3.8"

volumes:
  caddy-data:
  caddy-config:
 
services:
  caddy:
#   reverse proxy
#   cf. https://blog.kurokobo.com/archives/3669#Caddy_acme_server
    image: caddy:2
    ports:
      - 80:80
      - 443:443
      - 443:443/udp
      - 9000:9000
    environment:
      - GOINSECURE=${DOMAIN},*.${DOMAIN}
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - DOMAIN=${DOMAIN}
      - EMAIL4CERTS=${EMAIL4CERTS}
    volumes:
      - ./config/caddy/Caddyfile:/etc/caddy/Caddyfile
      # CA certificates to use, if self-signed, it needs update-ca-certificates
      - ./certs/root.crt:/data/caddy/pki/authorities/local/root.crt
      - ./certs/root.key:/data/caddy/pki/authorities/local/root.key
      - caddy-data:/data
      - caddy-config:/config
    healthcheck:
      # https://caddy.community/t/what-is-the-best-practise-for-doing-a-health-check-for-caddy-containers/12995
      test: "wget --no-verbose --tries=1 --spider http://localhost:2019/metrics || exit 1"
      interval: 5s
      retries: 20

# to generate HTTPS certifications on-demand >>>>>
  caddy-sidecar:
    image: httpd:2
    environment:
      - GOINSECURE=${DOMAIN},*.${DOMAIN}
      - NODE_TLS_REJECT_UNAUTHORIZED=0
    volumes:
       - ./certs/ca-certificates.crt:/etc/ssl/certs/ca-certificates.crt:ro
# to generate HTTPS certifications on-demand <<<<<

# debug for caddy>>> 
  test-wss:
    image: itaru2622/gorilla-websocket:bookworm
    build:
      context: ./tests/websocket-service
      dockerfile: Dockerfile
      args:
       - http_proxy=${http_proxy}
       - https_proxy=${https_proxy}
       - no_proxy=${no_proxy}
       - JAVA_TOOL_OPTIONS=${JAVA_TOOL_OPTIONS}
    environment:
      - GOINSECURE=${DOMAIN},*.${DOMAIN}
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - ENABLE_WSS=true
      - SCRIPT=*.go
    working_dir: /opt/gorilla-websocket/examples/chat
    volumes:
       - ./certs/ca-certificates.crt:/etc/ssl/certs/ca-certificates.crt:ro

  test-ws:
    image: itaru2622/gorilla-websocket:bookworm
    build:
       context: ./tests/websocket-service
       dockerfile: Dockerfile
       args:
        - http_proxy=${http_proxy}
        - https_proxy=${https_proxy}
        - no_proxy=${no_proxy}
        - JAVA_TOOL_OPTIONS=${JAVA_TOOL_OPTIONS}
    environment:
      - SCRIPT=*.go
    working_dir: /opt/gorilla-websocket/examples/chat
    volumes:
       - ./certs/ca-certificates.crt:/etc/ssl/certs/ca-certificates.crt:ro

# debug for caddy <<<
# debug for bluesky with indigo subcmds >>>
  test-indigo:
    image: itaru2622/bluesky-indigo-tools:${asof}
    build:
       context: ./repos/indigo/
       dockerfile: Dockerfile
    command: tail -f /dev/null
    environment:
      - GOINSECURE=${DOMAIN},*.${DOMAIN}
      - NODE_TLS_REJECT_UNAUTHORIZED=0
    volumes:
       - ./certs/ca-certificates.crt:/etc/ssl/certs/ca-certificates.crt:ro

# debug for bluesky with indigo subcmds <<<

  database:
    image: postgres:16-bookworm
    ports:
      - 5432:5432
    environment:
      - GOINSECURE=${DOMAIN},*.${DOMAIN}
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=healthcheck
    volumes:
      - ./config/init-postgres:/docker-entrypoint-initdb.d/
#     - ${dDir}/database/:/var/lib/postgresql/data/
    restart: always

  pgadmin:
    image: dpage/pgadmin4
    ports:
      - 54321:80
    environment:
      PGADMIN_DEFAULT_EMAIL:    example@example.com
      PGADMIN_DEFAULT_PASSWORD: password
#   volumes:
#      - ./certs/ca-certificates.crt:/etc/ssl/certs/ca-certificates.crt:ro
    depends_on:
      - database

  redis:
    image: redis:7-bookworm
#   volumes:
#     - ${dDir}/redis/:/data/
    restart: always

  opensearch:
    image: itaru2622/bluesky-indigo-opensearch:${asof}
    build:
      context: ./repos/indigo/
      dockerfile: cmd/palomar/Dockerfile.opensearch
      args:
       - http_proxy=${http_proxy}
       - https_proxy=${https_proxy}
       - no_proxy=${no_proxy}
       - JAVA_TOOL_OPTIONS=${JAVA_TOOL_OPTIONS}
# cf. https://github.com/opensearch-project/OpenSearch/issues/8215
       - OPENSEARCH_JAVA_OPTS=${OPENSEARCH_JAVA_OPTS}
    ports:
      - 9200:9200
    environment:
      - GOINSECURE=${DOMAIN},*.${DOMAIN}
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - cluster.name=docker-cluster
      - node.name=os-node
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - http.host=0.0.0.0
      - transport.host=127.0.0.1
      - plugins.security.disabled=true
      - OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m
    ulimits:
      memlock:
        soft: -1
        hard: -1
#   volumes:
#     - ${dDir}/opensearch/:/usr/share/opensearch/data/
    restart: always

  plc:
    image: itaru2622/did-method-plc:${asof}
    build:
      context: ./repos/did-method-plc/
      dockerfile: packages/server/Dockerfile
      args:
       - http_proxy=${http_proxy}
       - https_proxy=${https_proxy}
       - no_proxy=${no_proxy}
       - JAVA_TOOL_OPTIONS=${JAVA_TOOL_OPTIONS}
    ports:
      - 2582:2582
    volumes:
      # supporting self-signed certificates, easiest way >>>>
      - ./certs/ca-certificates.crt:/etc/ssl/certs/ca-certificates.crt:ro
      # supporting self-signed certificates, easiest way <<<<
    environment:
      - PORT=2582
      - GOINSECURE=${DOMAIN},*.${DOMAIN}
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - DEBUG_MODE=1
      - LOG_ENABLED=true
      - LOG_LEVEL=${LOG_LEVEL_DEFAULT}
      - LOG_DESTINATION=1
      - ENABLE_MIGRATIONS=true
      # this requires setting up a local postgresql user and database
      - DATABASE_URL=postgres://postgres:postgres@database/plc
      - DB_CREDS_JSON={"username":"postgres","password":"postgres","host":"database","port":"5432","database":"plc"}
      - DB_MIGRATE_CREDS_JSON={"username":"postgres","password":"postgres","host":"database","port":"5432","database":"plc"}
    restart: always
    depends_on:
      - database
      - caddy
      
  pds:
    image: itaru2622/bluesky-atproto-pds:${asof}
    build:
      context: ./repos/atproto/
      dockerfile: services/pds/Dockerfile
      args:
       - http_proxy=${http_proxy}
       - https_proxy=${https_proxy}
       - no_proxy=${no_proxy}
       - JAVA_TOOL_OPTIONS=${JAVA_TOOL_OPTIONS}
    ports:
      - 2583:2583
    expose:
      - 2583
    environment:
      - PDS_ENABLE_DID_DOC_WITH_SESSION=true
      - PDS_PORT=2583
      - GOINSECURE=${DOMAIN},*.${DOMAIN}
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - DEBUG_MODE=1
      - LOG_ENABLED=true
      - LOG_LEVEL=${LOG_LEVEL_DEFAULT}
      - LOG_DESTINATION=1
      - PDS_HOSTNAME=${DOMAIN}
# DONOT SET PDS_SERVICE_HANDLE_DOMAINS >>>>>
#     - PDS_SERVICE_HANDLE_DOMAINS=.test,.${DOMAIN}
# DONOT SET PDS_SERVICE_HANDLE_DOMAINS <<<<<
      # atproto/packages/pds/example.env >>>>
      - PDS_JWT_SECRET=${PDS_JWT_SECRET}
      - PDS_ADMIN_PASSWORD=${PDS_ADMIN_PASSWORD}
      - PDS_REPO_SIGNING_KEY_K256_PRIVATE_KEY_HEX=${PDS_REPO_SIGNING_KEY_K256_PRIVATE_KEY_HEX}
      - PDS_PLC_ROTATION_KEY_K256_PRIVATE_KEY_HEX=${PDS_PLC_ROTATION_KEY_K256_PRIVATE_KEY_HEX}
      # atproto/packages/pds/example.env <<<<
      - PDS_DATA_DIRECTORY=/pds
      - PDS_BLOBSTORE_DISK_LOCATION=/pds/image/static
      - PDS_BLOBSTORE_DISK_TMP_LOCATION=/pds/image/tmp
      - PDS_DB_POSTGRES_URL=postgres://postgres:postgres@database/pds
      - PDS_DID_PLC_URL=https://plc.${DOMAIN}
      - PDS_BSKY_APP_VIEW_URL=https://api.${DOMAIN}
      - PDS_BSKY_APP_VIEW_DID=did:web:api.${DOMAIN}
      - PDS_MOD_SERVICE_URL=https://mod.${DOMAIN}
      - PDS_MOD_SERVICE_DID=did:web:mod.${DOMAIN}
      - PDS_CRAWLERS=https://bgs.${DOMAIN}
      - PDS_EMAIL_SMTP_URL=${PDS_EMAIL_SMTP_URL}
      - PDS_EMAIL_FROM_ADDRESS=no-reply@gmail.com
      - PDS_INVITE_REQUIRED=false
      - PDS_INVITE_INTERVAL=604800000
    volumes:
      # supporting self-signed certificates, easiest way >>>>
      - ./certs/ca-certificates.crt:/etc/ssl/certs/ca-certificates.crt:ro
      # supporting self-signed certificates, easiest way <<<<
      - ${dDir}/pds/:/pds/
    restart: always
    depends_on:
      - database
      - caddy

  bgs:
    image: itaru2622/bluesky-indigo-bgs:${asof}
    build:
      context: ./repos/indigo/
      dockerfile: cmd/bigsky/Dockerfile
      args:
       - http_proxy=${http_proxy}
       - https_proxy=${https_proxy}
       - no_proxy=${no_proxy}
       - JAVA_TOOL_OPTIONS=${JAVA_TOOL_OPTIONS}
    ports:
      - 2470:2470
    command: /bigsky
    environment:
      - GOINSECURE=${DOMAIN},*.${DOMAIN}
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - DEBUG_MODE=1
      - LOG_ENABLED=true
      - LOG_LEVEL=${LOG_LEVEL_DEFAULT}
      - GODEBUG=netdns=go+4
      - LOG_DESTINATION=1
      # this requires setting up a local postgresql user and database
      - DATABASE_URL=postgres://postgres:postgres@database/bgs
      - CARSTORE_DATABASE_URL=postgres://postgres:postgres@database/carstore
      - DATA_DIR=/data/bigsky
      - ATP_PLC_HOST=https://plc.${DOMAIN}
      - BGS_ADMIN_KEY=${BGS_ADMIN_KEY}
# NG  - HANDLE_RESOLVER_HOSTS=api.${DOMAIN},pds.${DOMAIN},${DOMAIN}
# NG  - HANDLE_RESOLVER_HOSTS=pds.${DOMAIN}
    volumes:
      # supporting self-signed certificates, easiest way >>>>
      - ./certs/ca-certificates.crt:/etc/ssl/certs/ca-certificates.crt:ro
      # supporting self-signed certificates, easiest way <<<<
#      - ${dDir}/bgs/:/data/bigsky
    restart: always
    depends_on:
      - database
      - caddy

  bsky:
    # appview-api (api.${DOMAIN})
    image: itaru2622/bluesky-atproto-bsky:${asof}
    build:
      context: ./repos/atproto/
      dockerfile: services/bsky/Dockerfile
      args:
       - http_proxy=${http_proxy}
       - https_proxy=${https_proxy}
       - no_proxy=${no_proxy}
       - JAVA_TOOL_OPTIONS=${JAVA_TOOL_OPTIONS}
    ports:
      - 2584:2584
    expose:
      - 2584
    command: node --enable-source-maps api.js
    environment:
      - PORT=2584
      - GOINSECURE=${DOMAIN},*.${DOMAIN}
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - DEBUG_MODE=1
      - LOG_ENABLED=true
      - LOG_LEVEL=${LOG_LEVEL_DEFAULT}
      - LOG_DESTINATION=1
      # this requires setting up a local postgresql user and database
      - ENABLE_MIGRATIONS=true
      - DB_PRIMARY_POSTGRES_URL=postgres://postgres:postgres@database/bsky
      - DB_REPLICA_POSTGRES_URLS=postgres://postgres:postgres@database/bsky
      - DB_REPLICA_TAGS_ANY=0
      - MODERATION_SERVICE_DID=did:web:mod.${DOMAIN}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - MODERATOR_PASSWORD=${MODERATOR_PASSWORD}
      - TRIAGE_PASSWORD=${TRIAGE_PASSWORD}
      - SERVICE_SIGNING_KEY=${SERVICE_SIGNING_KEY}
      - IMG_URI_SALT=${IMG_URI_SALT}
      - IMG_URI_KEY=${IMG_URI_KEY}
      - SERVER_DID=did:web:api.${DOMAIN}
      - PUBLIC_URL=https://api.${DOMAIN}
      - DID_PLC_URL=https://plc.${DOMAIN}
      - SEARCH_ENDPOINT=http://search.${DOMAIN}
      - PUSH_NOTIFICATION_ENDPOINT=https://push.${DOMAIN}/api/push
      - REPO_PROVIDER=wss://${DOMAIN}
      - MODERATION_PUSH_URL=https://admin:${OZONE_ADMIN_PASSWORD}@mod.${DOMAIN}
###   - IMG_URI_ENDPOINT=https://cdn.${DOMAIN}
      - REDIS_HOST=redis
      - BLOB_CACHE_LOC=/cache/
      - INDEXER_PARTITION_IDS=0
      - INGESTER_PARTITION_COUNT=1
##    - CF_DISTRIBUTION_ID=<<REDACTED>>
    volumes:
      # supporting self-signed certificates, easiest way >>>>
      - ./certs/ca-certificates.crt:/etc/ssl/certs/ca-certificates.crt:ro
      # supporting self-signed certificates, easiest way <<<<
      - ${dDir}/appview/cache/:/cache/
    restart: always
    depends_on:
      - database
      - redis
      - caddy

  bsky-daemon:
    # appview-daemon
    image: itaru2622/bluesky-atproto-bsky:${asof}
    build:
      context: ./repos/atproto/
      dockerfile: services/bsky/Dockerfile
      args:
       - http_proxy=${http_proxy}
       - https_proxy=${https_proxy}
       - no_proxy=${no_proxy}
       - JAVA_TOOL_OPTIONS=${JAVA_TOOL_OPTIONS}
    command: node --enable-source-maps daemon.js
    environment:
      - PORT=2584
      - GOINSECURE=${DOMAIN},*.${DOMAIN}
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - DEBUG_MODE=1
      - LOG_ENABLED=true
      - LOG_LEVEL=${LOG_LEVEL_DEFAULT}
      - LOG_DESTINATION=1
      # this requires setting up a local postgresql user and database
      - ENABLE_MIGRATIONS=true
      - DB_PRIMARY_POSTGRES_URL=postgres://postgres:postgres@database/bsky
      - DB_REPLICA_POSTGRES_URLS=postgres://postgres:postgres@database/bsky
      - DB_REPLICA_TAGS_ANY=0
      - MODERATION_SERVICE_DID=did:web:mod.${DOMAIN}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - MODERATOR_PASSWORD=${MODERATOR_PASSWORD}
      - TRIAGE_PASSWORD=${TRIAGE_PASSWORD}
      - SERVICE_SIGNING_KEY=${SERVICE_SIGNING_KEY}
      - IMG_URI_SALT=${IMG_URI_SALT}
      - IMG_URI_KEY=${IMG_URI_KEY}
      - SERVER_DID=did:web:api.${DOMAIN}
      - PUBLIC_URL=https://api.${DOMAIN}
      - DID_PLC_URL=https://plc.${DOMAIN}
      - SEARCH_ENDPOINT=http://search.${DOMAIN}
      - PUSH_NOTIFICATION_ENDPOINT=https://push.${DOMAIN}/api/push
      - REPO_PROVIDER=wss://${DOMAIN}
      - MODERATION_PUSH_URL=https://admin:${OZONE_ADMIN_PASSWORD}@mod.${DOMAIN}
###   - IMG_URI_ENDPOINT=https://cdn.${DOMAIN}
      - REDIS_HOST=redis
      - BLOB_CACHE_LOC=/cache/
      - INDEXER_PARTITION_IDS=0
      - INGESTER_PARTITION_COUNT=1
##    - CF_DISTRIBUTION_ID=<<REDACTED>>
    volumes:
      # supporting self-signed certificates, easiest way >>>>
      - ./certs/ca-certificates.crt:/etc/ssl/certs/ca-certificates.crt:ro
      # supporting self-signed certificates, easiest way <<<<
      - ${dDir}/appview/cache/:/cache/
    restart: always
    depends_on:
      - bsky
      - database
      - redis
      - caddy

  bsky-indexer:
    image: itaru2622/bluesky-atproto-bsky:${asof}
    build:
      context: ./repos/atproto/
      dockerfile: services/bsky/Dockerfile
      args:
       - http_proxy=${http_proxy}
       - https_proxy=${https_proxy}
       - no_proxy=${no_proxy}
       - JAVA_TOOL_OPTIONS=${JAVA_TOOL_OPTIONS}
    command: node --enable-source-maps indexer.js
    environment:
      - PORT=2584
      - GOINSECURE=${DOMAIN},*.${DOMAIN}
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - DEBUG_MODE=1
      - LOG_ENABLED=true
      - LOG_LEVEL=${LOG_LEVEL_DEFAULT}
      - LOG_DESTINATION=1
      # this requires setting up a local postgresql user and database
      - ENABLE_MIGRATIONS=true
      - DB_PRIMARY_POSTGRES_URL=postgres://postgres:postgres@database/bsky
      - DB_REPLICA_POSTGRES_URLS=postgres://postgres:postgres@database/bsky
      - DB_REPLICA_TAGS_ANY=0
      - MODERATION_SERVICE_DID=did:web:mod.${DOMAIN}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - MODERATOR_PASSWORD=${MODERATOR_PASSWORD}
      - TRIAGE_PASSWORD=${TRIAGE_PASSWORD}
      - SERVICE_SIGNING_KEY=${SERVICE_SIGNING_KEY}
      - IMG_URI_SALT=${IMG_URI_SALT}
      - IMG_URI_KEY=${IMG_URI_KEY}
      - SERVER_DID=did:web:api.${DOMAIN}
      - PUBLIC_URL=https://api.${DOMAIN}
      - DID_PLC_URL=https://plc.${DOMAIN}
      - SEARCH_ENDPOINT=http://search.${DOMAIN}
      - PUSH_NOTIFICATION_ENDPOINT=https://push.${DOMAIN}/api/push
      - REPO_PROVIDER=wss://${DOMAIN}
      - MODERATION_PUSH_URL=https://admin:${OZONE_ADMIN_PASSWORD}@mod.${DOMAIN}
###   - IMG_URI_ENDPOINT=https://cdn.${DOMAIN}
      - REDIS_HOST=redis
      - BLOB_CACHE_LOC=/cache/
      - INDEXER_PARTITION_IDS=0
      - INGESTER_PARTITION_COUNT=1
##    - CF_DISTRIBUTION_ID=<<REDACTED>>
    volumes:
      # supporting self-signed certificates, easiest way >>>>
      - ./certs/ca-certificates.crt:/etc/ssl/certs/ca-certificates.crt:ro
      # supporting self-signed certificates, easiest way <<<<
      - ${dDir}/appview/cache/:/cache/
    restart: always
    depends_on:
      - bsky
      - database
      - redis
      - caddy

  bsky-ingester:
    image: itaru2622/bluesky-atproto-bsky:${asof}
    build:
      context: ./repos/atproto/
      dockerfile: services/bsky/Dockerfile
      args:
       - http_proxy=${http_proxy}
       - https_proxy=${https_proxy}
       - no_proxy=${no_proxy}
       - JAVA_TOOL_OPTIONS=${JAVA_TOOL_OPTIONS}
    command: node --enable-source-maps ingester.js
    environment:
      - PORT=2584
      - GOINSECURE=${DOMAIN},*.${DOMAIN}
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - DEBUG_MODE=1
      - LOG_ENABLED=true
      - LOG_LEVEL=${LOG_LEVEL_DEFAULT}
      - LOG_DESTINATION=1
      # this requires setting up a local postgresql user and database
      - ENABLE_MIGRATIONS=true
      - DB_PRIMARY_POSTGRES_URL=postgres://postgres:postgres@database/bsky
      - DB_REPLICA_POSTGRES_URLS=postgres://postgres:postgres@database/bsky
      - DB_REPLICA_TAGS_ANY=0
      - MODERATION_SERVICE_DID=did:web:mod.${DOMAIN}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - MODERATOR_PASSWORD=${MODERATOR_PASSWORD}
      - TRIAGE_PASSWORD=${TRIAGE_PASSWORD}
      - SERVICE_SIGNING_KEY=${SERVICE_SIGNING_KEY}
      - IMG_URI_SALT=${IMG_URI_SALT}
      - IMG_URI_KEY=${IMG_URI_KEY}
      - SERVER_DID=did:web:api.${DOMAIN}
      - PUBLIC_URL=https://api.${DOMAIN}
      - DID_PLC_URL=https://plc.${DOMAIN}
      - SEARCH_ENDPOINT=http://search.${DOMAIN}
      - PUSH_NOTIFICATION_ENDPOINT=https://push.${DOMAIN}/api/push
      - REPO_PROVIDER=wss://${DOMAIN}
      - MODERATION_PUSH_URL=https://admin:${OZONE_ADMIN_PASSWORD}@mod.${DOMAIN}
###   - IMG_URI_ENDPOINT=https://cdn.${DOMAIN}
      - REDIS_HOST=redis
      - BLOB_CACHE_LOC=/cache/
      - INDEXER_PARTITION_IDS=0
      - INGESTER_PARTITION_COUNT=1
##    - CF_DISTRIBUTION_ID=<<REDACTED>>
    volumes:
      # supporting self-signed certificates, easiest way >>>>
      - ./certs/ca-certificates.crt:/etc/ssl/certs/ca-certificates.crt:ro
      # supporting self-signed certificates, easiest way <<<<
      - ${dDir}/appview/cache/:/cache/
    restart: always
    depends_on:
      - bsky
      - database
      - redis
      - caddy

  bsky-cdn:
    #appview-cdn
    image: itaru2622/bluesky-atproto-bsky:${asof}
    build:
      context: ./repos/atproto/
      dockerfile: services/bsky/Dockerfile
      args:
       - http_proxy=${http_proxy}
       - https_proxy=${https_proxy}
       - no_proxy=${no_proxy}
       - JAVA_TOOL_OPTIONS=${JAVA_TOOL_OPTIONS}
    environment:
      - PORT=2584
      - GOINSECURE=${DOMAIN},*.${DOMAIN}
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - DEBUG_MODE=1
      - LOG_ENABLED=true
      - LOG_LEVEL=${LOG_LEVEL_DEFAULT}
      - LOG_DESTINATION=1
      # this requires setting up a local postgresql user and database
      - ENABLE_MIGRATIONS=true
      - DB_PRIMARY_POSTGRES_URL=postgres://postgres:postgres@database/bsky
      - DB_REPLICA_POSTGRES_URLS=postgres://postgres:postgres@database/bsky
      - DB_REPLICA_TAGS_ANY=0
      - MODERATION_SERVICE_DID=did:web:mod.${DOMAIN}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - MODERATOR_PASSWORD=${MODERATOR_PASSWORD}
      - TRIAGE_PASSWORD=${TRIAGE_PASSWORD}
      - SERVICE_SIGNING_KEY=${SERVICE_SIGNING_KEY}
      - IMG_URI_SALT=${IMG_URI_SALT}
      - IMG_URI_KEY=${IMG_URI_KEY}
      - SERVER_DID=did:web:api.${DOMAIN}
      - PUBLIC_URL=https://api.${DOMAIN}
      - DID_PLC_URL=https://plc.${DOMAIN}
      - SEARCH_ENDPOINT=http://search.${DOMAIN}
      - PUSH_NOTIFICATION_ENDPOINT=https://push.${DOMAIN}/api/push
      - REPO_PROVIDER=wss://${DOMAIN}
      - MODERATION_PUSH_URL=https://admin:${OZONE_ADMIN_PASSWORD}@mod.${DOMAIN}
####  - IMG_URI_ENDPOINT=https://cdn.${DOMAIN}
      - REDIS_HOST=redis
      - BLOB_CACHE_LOC=/cache/
      - INDEXER_PARTITION_IDS=0
      - INGESTER_PARTITION_COUNT=1
##    - CF_DISTRIBUTION_ID=<<REDACTED>>
    volumes:
      # supporting self-signed certificates, easiest way >>>>
      - ./certs/ca-certificates.crt:/etc/ssl/certs/ca-certificates.crt:ro
      # supporting self-signed certificates, easiest way <<<<
      - ${dDir}/appview/cache/:/cache/
    restart: always
    depends_on:
      - bsky
      - database
      - redis
      - caddy

  social-app:
    image: itaru2622/bluesky-social-app:${asof}${DOMAIN}
    build:
      context: ./repos/social-app/
      dockerfile: Dockerfile
      args:
       - http_proxy=${http_proxy}
       - https_proxy=${https_proxy}
       - no_proxy=${no_proxy}
       - JAVA_TOOL_OPTIONS=${JAVA_TOOL_OPTIONS}
    ports:
      - 8100:8100
    command: /usr/bin/bskyweb serve
    volumes:
      # supporting self-signed certificates, easiest way >>>>
      - ./certs/ca-certificates.crt:/etc/ssl/certs/ca-certificates.crt:ro
      # supporting self-signed certificates, easiest way <<<<
    environment:
      - HTTP_ADDRESS=:8100
      - GOINSECURE=${DOMAIN},*.${DOMAIN}
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - LOG_LEVEL=${LOG_LEVEL_DEFAULT}
      - GOLOG_LOG_LEVEL=${LOG_LEVEL_DEFAULT}
      - ATP_APPVIEW_HOST=https://api.${DOMAIN}
    restart: always


  search:
    image: itaru2622/bluesky-indigo-palomar:${asof}
    build:
      context: ./repos/indigo/
      dockerfile: cmd/palomar/Dockerfile
      args:
       - http_proxy=${http_proxy}
       - https_proxy=${https_proxy}
       - no_proxy=${no_proxy}
       - JAVA_TOOL_OPTIONS=${JAVA_TOOL_OPTIONS}
    ports:
      - 3999:3999
    volumes:
      # supporting self-signed certificates, easiest way >>>>
      - ./certs/ca-certificates.crt:/etc/ssl/certs/ca-certificates.crt:ro
      # supporting self-signed certificates, easiest way <<<<
    environment:
      - GOINSECURE=${DOMAIN},*.${DOMAIN}
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - ES_INSECURE_SSL=true
#       refer https://github.com/bluesky-social/indigo/tree/main/cmd/palomar
      - ATP_BGS_HOST=wss://bgs.${DOMAIN}
      - ATP_PLC_HOST=https://plc.${DOMAIN}
      - DATABASE_URL=postgres://postgres:postgres@database/search
      - PALOMAR_BIND=0.0.0.0:3999
      - ES_USERNAME=
      - ES_PASSWORD=
#     - ES_CERT_FILE=
      - ES_HOSTS=http://opensearch:9200
    restart: always
    depends_on:
      - opensearch
      - database
      - caddy

  mod:
    # moderation-api:
    image: itaru2622/bluesky-atproto-ozone:${asof}
    build:
      context: ./repos/atproto/
      dockerfile: services/ozone/Dockerfile
      args:
       - http_proxy=${http_proxy}
       - https_proxy=${https_proxy}
       - no_proxy=${no_proxy}
       - JAVA_TOOL_OPTIONS=${JAVA_TOOL_OPTIONS}
    command: node --enable-source-maps api.js
    ports:
      - 3000:3000
    volumes:
      # supporting self-signed certificates, easiest way >>>>
      - ./certs/ca-certificates.crt:/etc/ssl/certs/ca-certificates.crt:ro
      # supporting self-signed certificates, easiest way <<<<
    environment:
      - OZONE_PORT=3000
      - GOINSECURE=${DOMAIN},*.${DOMAIN}
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - DEBUG_MODE=1
      - LOG_ENABLED=true
      - LOG_LEVEL=${LOG_LEVEL_DEFAULT}
      - LOG_DESTINATION=1
      - ENABLE_MIGRATIONS=true
      - OZONE_PUBLIC_URL=https://mod.${DOMAIN}
      - OZONE_SERVER_DID=did:web:mod.${DOMAIN}
      - OZONE_APPVIEW_URL=https://api.${DOMAIN}
      - OZONE_APPVIEW_DID=did:web:api.${DOMAIN}
      - OZONE_PDS_URL=https://${DOMAIN}
      - OZONE_PDS_DID=did:web:${DOMAIN}
      - OZONE_DB_POSTGRES_URL=postgres://postgres:postgres@database/mod
      - OZONE_DID_PLC_URL=https://plc.${DOMAIN}
      - OZONE_ADMIN_PASSWORD=${OZONE_ADMIN_PASSWORD}
      - MODERATION_PUSH_URL=https://admin:${OZONE_ADMIN_PASSWORD}@mod.${DOMAIN}
      - OZONE_MODERATOR_PASSWORD=${OZONE_MODERATOR_PASSWORD}
      - OZONE_TRIAGE_PASSWORD=${OZONE_TRIAGE_PASSWORD}
      - OZONE_SIGNING_KEY_HEX=${OZONE_SIGNING_KEY_HEX}
    restart: always
    depends_on:
      - database
      - caddy

  mod-daemon:
    image: itaru2622/bluesky-atproto-ozone:${asof}
    build:
      context: ./repos/atproto/
      dockerfile: services/ozone/Dockerfile
      args:
       - http_proxy=${http_proxy}
       - https_proxy=${https_proxy}
       - no_proxy=${no_proxy}
       - JAVA_TOOL_OPTIONS=${JAVA_TOOL_OPTIONS}
    command: node --enable-source-maps daemon.js
    volumes:
      # supporting self-signed certificates, easiest way >>>>
      - ./certs/ca-certificates.crt:/etc/ssl/certs/ca-certificates.crt:ro
      # supporting self-signed certificates, easiest way <<<<
    environment:
      - OZONE_PORT=3000
      - GOINSECURE=${DOMAIN},*.${DOMAIN}
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - DEBUG_MODE=1
      - LOG_ENABLED=true
      - LOG_LEVEL=${LOG_LEVEL_DEFAULT}
      - LOG_DESTINATION=1
      - ENABLE_MIGRATIONS=true
      - OZONE_PUBLIC_URL=https://mod.${DOMAIN}
      - OZONE_SERVER_DID=did:web:mod.${DOMAIN}
      - OZONE_APPVIEW_URL=https://api.${DOMAIN}
      - OZONE_APPVIEW_DID=did:web:api.${DOMAIN}
      - OZONE_PDS_URL=https://${DOMAIN}
      - OZONE_PDS_DID=did:web:${DOMAIN}
      - OZONE_DB_POSTGRES_URL=postgres://postgres:postgres@database/mod
      - OZONE_DID_PLC_URL=https://plc.${DOMAIN}
      - OZONE_ADMIN_PASSWORD=${OZONE_ADMIN_PASSWORD}
      - MODERATION_PUSH_URL=https://admin:${OZONE_ADMIN_PASSWORD}@mod.${DOMAIN}
      - OZONE_MODERATOR_PASSWORD=${OZONE_MODERATOR_PASSWORD}
      - OZONE_TRIAGE_PASSWORD=${OZONE_TRIAGE_PASSWORD}
      - OZONE_SIGNING_KEY_HEX=${OZONE_SIGNING_KEY_HEX}
    restart: always
    depends_on:
      - mod
      - database
      - caddy

  feed-generator:
    image: itaru2622/bluesky-feed-generator:${asof}${DOMAIN}
    build:
      context: ./repos/feed-generator/
    ports:
      - 2586:3000
    environment:
      - GOINSECURE=${DOMAIN},*.${DOMAIN}
      - NODE_TLS_REJECT_UNAUTHORIZED=0
      - NODE_ENV=development
      - FEEDGEN_PORT=3000
      - FEEDGEN_LISTENHOST=0.0.0.0
      - FEEDGEN_SQLITE_LOCATION=/data/db.sqlite
      - FEEDGEN_SUBSCRIPTION_ENDPOINT=wss://bgs.${DOMAIN}
      - FEEDGEN_HOSTNAME=feed-generator.${DOMAIN}
      - FEEDGEN_SERVICE_DID=did:web:feed-generator.${DOMAIN}
      - FEEDGEN_SUBSCRIPTION_RECONNECT_DELAY=3000
#  Set this to the DID of the account you'll use to publish the feed. You can find your accounts DID by https://pds.${DOMAIN}/xrpc/com.atproto.identity.resolveHandle?handle=feed-generator.${DOMAIN}
#     - FEEDGEN_PUBLISHER_DID=did:plc:237apsyaiw4mypx3zzo3wwgc
      - FEEDGEN_PUBLISHER_DID=${FEEDGEN_PUBLISHER_DID}
      - FEEDGEN_PUBLISHER_HANDLE=${FEEDGEN_PUBLISHER_HANDLE}
      - FEEDGEN_PUBLISHER_PASSWORD=${FEEDGEN_PUBLISHER_PASSWORD}
    restart: always
    volumes:
      # supporting self-signed certificates, easiest way >>>>
      - ./certs/ca-certificates.crt:/etc/ssl/certs/ca-certificates.crt:ro
      # supporting self-signed certificates, easiest way <<<<
      - ${dDir}/feed-generator/:/data/
