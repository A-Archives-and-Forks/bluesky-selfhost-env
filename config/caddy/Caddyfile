#
# cf. https://caddyserver.com/docs/caddyfile
#     https://caddyserver.com/docs/caddyfile/directives/tls
#
# global options: starts >>>>
{
#	debug
        on_demand_tls {
          ask http://test-caddy:80
        }
}
# global options: ends   <<<<

# self hosting CA with ACME,  for self signed certicates >>>>
#   accessible as https://ca.DOMAIN:9000/acme/local/directory
#   cf. https://blog.kurokobo.com/archives/3669#Caddy_acme_server
#
ca.{$DOMAIN}:9000 {
	tls internal
	acme_server
}
# self hosting CA with ACME,  for self signed certicates <<<<

# reverse proxying rules: start >>>>>
#
#  FQDN_FOR_OUTER {
#     tls  internal(for self-signed) | your@email.address(for public-signed)
#     reverse_proxy http://container:port
# }

# for debug HTTPS=>HTTP proxying  >>>
#     try curl https://test-caddy.DOMAIN/
test-caddy.{$DOMAIN} {
	tls {$EMAIL4CERTS} {
          on_demand
        }
	reverse_proxy http://test-caddy:80
}

test-ws.{$DOMAIN} {
	tls {$EMAIL4CERTS} {
          on_demand
        }
# it seems no need below lines, even https://caddy.community/t/websockets-over-https/16871 says it needed... <<<<<
#	@ws {
#		header Connection *Upgrade*
#		header Upgrade websocket
#	}
# <<<<<<
	reverse_proxy http://test-ws:8080
# it seems no need below line
#	reverse_proxy @ws http://test-ws:8080
}

# for debug HTTPS=>HTTP proxying  <<<

# added by debugging >>>>>>
search.{$DOMAIN} {
	tls {$EMAIL4CERTS} {
          on_demand
        }
	reverse_proxy http://search:3999
}
# added by debugging <<<<<<<

plc.{$DOMAIN} {
	tls {$EMAIL4CERTS} {
          on_demand
        }
	reverse_proxy http://plc:3000
}

bgs.{$DOMAIN} {
	tls {$EMAIL4CERTS} {
          on_demand
        }
	reverse_proxy http://bgs:2470
}

api.{$DOMAIN}, bsky.{$DOMAIN} {
	tls {$EMAIL4CERTS} {
          on_demand
        }
	reverse_proxy http://bsky:3000
}

mod.{$DOMAIN} {
	tls {$EMAIL4CERTS} {
          on_demand
        }
	reverse_proxy http://mod:3000
}

social-app.{$DOMAIN} {
	tls {$EMAIL4CERTS} {
          on_demand
        }
	reverse_proxy http://social-app:8100
}

pds.{$DOMAIN}, {$DOMAIN}, *.{$DOMAIN} {
	tls {$EMAIL4CERTS} {
          on_demand
        }
	reverse_proxy http://pds:3000
}

# not sure, for safe, below >>>
public.api.{$DOMAIN} {
	tls {$EMAIL4CERTS} {
          on_demand
        }
	reverse_proxy http://pds:3000
}

# reverse proxying rules: ends  <<<<
