#
# this mapping rules are converted into Caddyfile from traefik rules of https://github.com/ikuradon/atproto-starter-kit/blob/main/compose.yaml
# cf. https://caddyserver.com/docs/caddyfile
#
# global options: starts >>>>
{
#	debug
        on_demand_tls {
          ask http://caddy-sidecar:80
        }
#    limits to HTTP/1.1 >>>
        servers  {
          protocols  h1
        }
#    limits to HTTP/1.1 <<<
}
# global options: ends   <<<<

# self-hosting CA with ACME,  for self signed certicates >>>>
#   accessible as https://ca.DOMAIN:9000/acme/local/directory
#   cf. https://blog.kurokobo.com/archives/3669#Caddy_acme_server
#
ca.{$DOMAIN}:9000 {
	tls internal
	acme_server
}
# self-hosting CA with ACME,  for self signed certicates <<<<

# starts; reverse proxying rules >>>>>
#
#  FQDN_FOR_OUTER {
#	tls internal(for self-signed) | your@email.address(for public-signed) {
#         on_demand
#       }
#       reverse_proxy http://container:port
# }

# starts: to check if sidecar working, this record maybe need just for debugging. >>>>
caddy-sidecar.{$DOMAIN} {
	tls {$EMAIL4CERTS} {
          on_demand
        }
	reverse_proxy http://caddy-sidecar:80
}
# ends: to check if sidecar working, this record maybe need just for debugging. <<<<

# starts: to check if caddy works as reverse proxy, for HTTP(S) and WS(S) >>>>>>>>>>
#  for HTTPS/WSS => HTTP/WS, you can test websocket by ```wscat -c wss://test-wss.mybluesky.local.com/ws```
test-wss.{$DOMAIN} {
	tls {$EMAIL4CERTS} {
          on_demand
        }

	@ws {
		header Connection *Upgrade*
		header Upgrade websocket
	}

	reverse_proxy @ws http://test-wss:8080
	reverse_proxy http://test-wss:8080

}

#  for HTTP/WS => HTTP/WS, you can test websocket by ```wscat -c ws://test-ws.mybluesky.local.com/ws```
http://test-ws.{$DOMAIN} {
	tls {$EMAIL4CERTS} {
          on_demand
        }
	@ws {
		header Connection *Upgrade*
		header Upgrade websocket
	}

	reverse_proxy @ws http://test-ws:8080
	reverse_proxy http://test-ws:8080
}

# ends: to check if caddy works as reverse proxy, for HTTP(S) and WS(S) <<<<<<<<<<

# starts: simple mapping >>>>>

plc.{$DOMAIN} {
	tls {$EMAIL4CERTS} {
          on_demand
        }
	reverse_proxy http://plc:2582
}

bgs.{$DOMAIN} {
	tls {$EMAIL4CERTS} {
          on_demand
        }
	reverse_proxy http://bgs:2470
}

api.{$DOMAIN}, bsky.{$DOMAIN} {
	tls {$EMAIL4CERTS} {
          on_demand
        }
	reverse_proxy http://bsky:2584
}

pds.{$DOMAIN} {
	tls {$EMAIL4CERTS} {
          on_demand
        }

        @ws {
          header Connection *Upgrade*
          header Upgrade websocket
        }

        reverse_proxy @ws http://pds:2583
        reverse_proxy     http://pds:2583

}

social-app.{$DOMAIN} {
	tls {$EMAIL4CERTS} {
          on_demand
        }
	reverse_proxy http://social-app:8100
}

mod.{$DOMAIN} {
	tls {$EMAIL4CERTS} {
          on_demand
        }
	reverse_proxy http://mod:3000
}

search.{$DOMAIN} {
	tls {$EMAIL4CERTS} {
          on_demand
        }
	reverse_proxy http://search:3999
}

feed-generator.{$DOMAIN} {
	tls {$EMAIL4CERTS} {
          on_demand
        }
	reverse_proxy http://feed-generator:3000
}

# ends:  simple mapping <<<<<

# starts:  DOMAIN and *.DOMAIN >>>>>>>>>>>
{$DOMAIN} {
        tls {$EMAIL4CERTS} {
          on_demand
        }

        @ws {
          header Connection *Upgrade*
          header Upgrade websocket
        }

        reverse_proxy @ws                 http://pds:2583
        reverse_proxy /xrpc*              http://pds:2583
        reverse_proxy /.well-known*       http://pds:2583
        reverse_proxy /robots.txt*        http://pds:2583


        # others (default)
        reverse_proxy                     http://social-app:8100
}

*.{$DOMAIN} {
        tls {$EMAIL4CERTS} {
          on_demand
        }
#  it needs both of header_regexp and path_regexp with rewrite then reverse_proxy.
#---------------
#      websocket
        @ws {
          header Connection *Upgrade*
          header Upgrade websocket
          header_regexp host Host ^(.*)\.{$DOMAIN}$
	  path_regexp   path      ^(.*)
        }
        rewrite       @ws           {http.regexp.path.1}
        reverse_proxy @ws           http://pds:2583

#---------------
#      *.DOMAIN/xrpc*  => http://pds:2583
        @pds1 {
            header_regexp host Host ^(.*)\.{$DOMAIN}$
            path_regexp   path      ^(/xrpc.*)
        }
        rewrite        @pds1        {http.regexp.path.1}
        reverse_proxy  @pds1        http://pds:2583

#---------------
#      *.DOMAIN/.well-known* => http://pds:2583
        @pds2 {
            header_regexp host Host ^(.*)\.{$DOMAIN}$
            path_regexp   path      ^(/\.well-known.*)
        }
        rewrite        @pds2        {http.regexp.path.1}
        reverse_proxy  @pds2        http://pds:2583

#---------------
#      *.DOMAIN/robot.txt* => http://pds:2583
        @pds3 {
            header_regexp host Host ^(.*)\.{$DOMAIN}$
            path_regexp   path      ^(/robots\.txt*)
        }
        rewrite        @pds3        {http.regexp.path.1}
        reverse_proxy  @pds3        http://pds:2583

#---------------
#     (.*).DOMAIN/(.*) => http://social-app:8100/profile/$$1/$$2
        @social {
            header_regexp host Host ^(.*)\.{$DOMAIN}$
            path_regexp   path      ^(.*)
        }
        rewrite        @social   /profile/{http.regexp.host.1}{http.regexp.path.1}
        reverse_proxy  @social   http://social-app:8100
}

# ends:  just DOMAIN and requiring rewrite ... <<<<<<<<<<<

# starts: additional (long FQDN) >>>>>>>>>

# for ATP_APPVIEW_HOST=https://public.api.bsky.app in https://github.com/bluesky-social/social-app/blob/main/bskyweb/example.env
public.api.{$DOMAIN} {
	tls {$EMAIL4CERTS} {
          on_demand
        }
	reverse_proxy http://bsky:2584
}
# ends: additional (long FQDN)   <<<<<<<<<
