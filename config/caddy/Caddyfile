#
# cf. https://caddyserver.com/docs/caddyfile
#     https://caddyserver.com/docs/caddyfile/directives/tls
#
# global options: starts >>>>
{
#	debug
        on_demand_tls {
          ask http://caddy-sidecar:80
        }
}
# global options: ends   <<<<

# self-hosting CA with ACME,  for self signed certicates >>>>
#   accessible as https://ca.DOMAIN:9000/acme/local/directory
#   cf. https://blog.kurokobo.com/archives/3669#Caddy_acme_server
#
ca.{$DOMAIN}:9000 {
	tls internal
	acme_server
}
# self-hosting CA with ACME,  for self signed certicates <<<<

# starts; reverse proxying rules >>>>>
#
#  FQDN_FOR_OUTER {
#	tls internal(for self-signed) | your@email.address(for public-signed) {
#         on_demand
#       }
#       reverse_proxy http://container:port
# }

# to check if sidecar working, this reverse proxy record maybe used for debugging. >>>>
caddy-sidecar.{$DOMAIN} {
	tls {$EMAIL4CERTS} {
          on_demand
        }
	reverse_proxy http://caddy-sidecar:80
}
# to check if sidecar working, this reverse proxy record maybe used for debugging. <<<<

# to check if caddy works for HTTPS=>HTTP and WSS=>WS as reverse proxy >>>>>
test-ws.{$DOMAIN} {
	tls {$EMAIL4CERTS} {
          on_demand
        }
#
# this block seems no need, even https://caddy.community/t/websockets-over-https/16871 says it needed... <<<<<
#	@ws {
#		header Connection *Upgrade*
#		header Upgrade websocket
#	}
#
	reverse_proxy http://test-ws:8080

# below line also seems no need.
#	reverse_proxy @ws http://test-ws:8080

}
# to check if caddy works for HTTPS=>HTTP and WSS=>WS as reverse proxy <<<<<


plc.{$DOMAIN} {
	tls {$EMAIL4CERTS} {
          on_demand
        }
	reverse_proxy http://plc:3000
}

bgs.{$DOMAIN} {
	tls {$EMAIL4CERTS} {
          on_demand
        }
	reverse_proxy http://bgs:2470
}

api.{$DOMAIN}, bsky.{$DOMAIN} {
	tls {$EMAIL4CERTS} {
          on_demand
        }
	reverse_proxy http://bsky:3000
}

{$DOMAIN}, pds.{$DOMAIN}, *.{$DOMAIN} {
	tls {$EMAIL4CERTS} {
          on_demand
        }
	reverse_proxy http://pds:3000
}

social-app.{$DOMAIN} {
	tls {$EMAIL4CERTS} {
          on_demand
        }
	reverse_proxy http://social-app:8100
}

mod.{$DOMAIN} {
	tls {$EMAIL4CERTS} {
          on_demand
        }
	reverse_proxy http://mod:3000
}


search.{$DOMAIN} {
	tls {$EMAIL4CERTS} {
          on_demand
        }
	reverse_proxy http://search:3999
}

feed-generator.{$DOMAIN} {
	tls {$EMAIL4CERTS} {
          on_demand
        }
	reverse_proxy http://feed-generator:3000
}


# ATP_APPVIEW_HOST=https://public.api.bsky.app in https://github.com/bluesky-social/social-app/blob/main/bskyweb/example.env >>>>>>>>
# in docker-compose, APPVIEW === bsky
public.api.{$DOMAIN} {
	tls {$EMAIL4CERTS} {
          on_demand
        }
	reverse_proxy http://bsky:3000
}
# ATP_APPVIEW_HOST=https://public.api.bsky.app in https://github.com/bluesky-social/social-app/blob/main/bskyweb/example.env <<<<<<<<

# ends: reverse proxying rules  <<<<
